@page "/authors/edit/{Id}"


@inject IAuthorRepository _repo
@inject NavigationManager _navMan


<h3 class="card-title">Edit</h3>

@if (isFaild)
{
    <LoadingPrompt Message="Blad pobierania..."/>
}

@if(Model == null)
{
    <LoadingPrompt Message=""/>
}
else
{
    <EditForm Model="Model" OnValidSubmit="EditAuthor" >
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-gropu">
            <label for="firstname">First Name</label>
            <InputText @bind-Value="Model.FirstName" class="form-control" id="firstname"></InputText> 
        </div>
        <div class="form-group">
            <label for="lastname">Last Name</label>
            <InputText @bind-Value="Model.LastName" class="form-control" id="lastname"></InputText>
        </div>
        <div class="form-group">
            <label for="bio">O autorze</label>
            <InputTextArea @bind-Value="Model.Bio" class="form-control" id="bio"></InputTextArea>
        </div>

            <div>
                <button class="w-20 btn btn-py-sm-2 btn-primary" type="submit">SAVE</button>
            </div>
         </EditForm>
}

<div>
    <button class="w-20 btn btn-py-sm-2 btn-primary" @onclick="GoBack" type="submit">
        <span class="oi oi-media-step-backward"/> Go back
    </button>
</div>


@code {

    [Parameter]
    public string Id { get; set; }
    private Author Model = new Author();

    private bool isFaild = false;

    protected override async Task OnInitializedAsync()
    {
        int id = Convert.ToInt32(Id);
        Model = await _repo.Get(Static.Endpoints.AuthorsEndpoint, id);
    }

    private async Task EditAuthor()
    {
        bool isSuccesss = await _repo.Update(Endpoints.AuthorsEndpoint, Model, Model.Id);
        if (isSuccesss)
        {
            GoBack();
        }
        else
        {
            isFaild = true;
        }
    }

    private void GoBack()
    {
        _navMan.NavigateTo("/authors/");
    }


}
