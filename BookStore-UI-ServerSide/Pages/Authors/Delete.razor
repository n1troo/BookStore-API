@page "/authors/delete/{Id}"

@attribute [Authorize(Roles = "Administrator")]

@inject IAuthorRepository _repo
@inject NavigationManager _navMan
<h3 class="card-card-title">Delete</h3>
@if (isFaild)
{
    <LoadingPrompt Message="Nie mozna usunac" />
}
@if(Model == null)
{
    <LoadingPrompt Message=""/>
}
else
{
    <div class="col-md-4 bg-info">
        <h4>Author Details</h4>
        <table class="table table-responsive">
            <tr>
                <td>Numer</td>
                <td>@Model.Id</td>
            </tr>
            <tr>
                <td>First Name</td>
                <td>@Model.FirstName</td>
            </tr>
            <tr>
                <td>Last Name</td>
                <td>@Model.LastName</td>
            </tr>
            <tr>
                <td>Bio</td>
                <td>@Model.Bio</td>
            </tr>
        </table>

        <button class="btn btn-warning" @onclick="AuthorDelete">
        <span class="oi-delete"></span>
        Delete Author now</button>
    </div>
}

<div>
    <button class="w-20 btn btn-py-sm-2 btn-primary" @onclick="GoBack" type="submit">
        <span class="oi oi-media-step-backward"/> Go back
    </button>
</div>


@code {
    [Parameter]
    public String Id { get; set; }

    private bool isFaild = false;
    private Author Model = new Author();

    protected override async Task OnInitializedAsync()
    {
        int id = Convert.ToInt32(Id);
        Model = await _repo.Get(Endpoints.AuthorsEndpoint, id);
    }

    private async Task AuthorDelete()
    {
       var isSuccesed =  await _repo.Delete(Endpoints.AuthorsEndpoint, Model.Id);
        if (isSuccesed)
        {
            GoBack();
        }
        else
        {
           isFaild = true;
        }
    }

    private void GoBack()
    {
         _navMan.NavigateTo("/authors");
    }
}
