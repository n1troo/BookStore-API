@page "/books/edit/{Id}"
@using System.IO

@attribute [Authorize(Roles = "Administrator")]
@inject IBookRepository _bookRepo
@inject IAuthorRepository _authorRepo
@inject IFileUpload _fileUpload
@inject NavigationManager _navMan


<h3>Edit Book</h3>

@if(int.Parse(Id) < 1 || string.IsNullOrWhiteSpace(Id))
{
    <LoadingPrompt Message="Invalid selection. Please try again"/>
}
@if(Model == null){
    <LoadingPrompt Message=""/>
}
else
{
    <EditForm Model="Model" OnValidSubmit="HandlerUpdate">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="title">Book title</label>
            <InputText @bind-Value="Model.Title" class="form-control" id="title" />
        </div>
        <div class="form-group">
            <label for="isbn">ISBN</label>
            <InputText @bind-Value="Model.Isbn" class="form-control" id="isbn" />
        </div>
        <div class="form-group">
            <label for="price">Price</label>
            <InputNumber @bind-Value="Model.Price" class="form-group" id="price" />
        </div>
        <div class="from-grop">
            <label for="Authors">Author</label>
            <select @bind="Model.AuthorId" class="form-control" id="author">
                <option value=""> --Select author--</option>
                @if (Authors != null)
                {
                    foreach (var author in Authors)
                    {
                        <option value="@author.Id">@author.FirstName @author.LastName</option>
                    }
                }
            </select>
        </div>

        <div class="form-btn-group-sm border-left">
            @if (!string.IsNullOrWhiteSpace(imageDataURL))
            {
                <img src="@imageDataURL" style="height:100px;width:100px" />
            }
            else if(!string.IsNullOrWhiteSpace(Model.Image))
            {
                <img src="/uploads/@Model.Image" style="height:100px;width:100px" />
            }

            <label for="bookcover">Book Cover Photo</label>
            <InputFile OnChange="HandleFileSelection" />
            @if (isInvalidFileType)
            {
                <LoadingPrompt Message="Please remove the invalid file type and select as new image, or leave this field blank" />
            }

        </div>
    
        <button type="submit" class="btn alert-primary">Submit changes</button>
    </EditForm>

    <button class="btn alert-danger" @onclick="GoBackToList">Go back</button>
}

@code {
    [Parameter]
    public string Id { get; set; }

    private int zmienna = 0;
    private Book Model = new Book();
    private IList<Author> Authors;

    private IBrowserFile file;
    private bool isSuccess = true;
    private bool isInvalidFileType = false;
    private bool isFileChanged = false;

    private string imageDataURL;
    private Stream msFile;

    protected override async Task OnInitializedAsync()
    {
        Model = await _bookRepo.Get(Endpoints.BooksEndpoint, Convert.ToInt32(Id));
        Authors = await _authorRepo.Get(Endpoints.AuthorsEndpoint);
    }

     private async Task HandlerUpdate()
    {
        if (!isInvalidFileType)
        {
            if (file != null)
            {
                var ext = Path.GetExtension(file.Name);
                var picId = Guid.NewGuid().ToString().Replace("-", "");
                var picName = $"{picId}{ext}";

                _fileUpload.RemoveFile(Model.Image);
                await _fileUpload.UploadFile(msFile, picName);

                Model.Image = picName;
            }
            else if (isFileChanged && file == null)
            {
                _fileUpload.RemoveFile(Model.Image);
                Model.Image = string.Empty;
            }

            isSuccess = await _bookRepo.Update(Endpoints.BooksEndpoint, Model, Model.Id);
            if (isSuccess)
            {
                BackToList();
            }
        }
    }

    private void GoBackToList()
    {
        _navMan.NavigateTo("/books/");
    }

    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        file = e.File;
         isFileChanged = true;
        if (file != null)
        {
            var ext = System.IO.Path.GetExtension(file.Name); 
            if (ext.Contains("jpg") || ext.Contains("png") || ext.Contains("jpeg"))
            {
                msFile = file.OpenReadStream();

                var resizedImageFile = await file.RequestImageFileAsync("image/png",100, 100);

                var buffer = new byte[resizedImageFile.Size];
                await resizedImageFile.OpenReadStream().ReadAsync(buffer);

                var imageBase64Data = Convert.ToBase64String(buffer);
                imageDataURL = string.Format("data:image/png;base64,{0}", imageBase64Data);
                isInvalidFileType = false;
            }
            else
            {
                isInvalidFileType = true;
                imageDataURL = string.Empty;
            }
        }
        else
        {
            isInvalidFileType = false;
        }
    }
    private void BackToList()
    {
        _navMan.NavigateTo("/books/");
    }
}
