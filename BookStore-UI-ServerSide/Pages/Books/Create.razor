@page "/books/create/"

@using System.IO
@using System.Diagnostics

@inject IBookRepository _bookRepo
@inject IAuthorRepository _authorRepo
@inject IFileUpload _uploadFile

@inject NavigationManager _navMan

<h3>Create</h3>
<hr />
<br />


@if (!isSuccess)
{
    <LoadingPrompt Message="Someting go wrong!"/>

}

<EditForm Model="Model" OnValidSubmit="HandlerCreate">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <div class="form-group">
        <label for="title">Book title</label>
        <InputText @bind-Value="Model.Title" class="form-control" id="title"/>
    </div>
    <div class="form-group">
        <label for="isbn">ISBN</label>
        <InputText @bind-Value="Model.Isbn" class="form-control" id="isbn"/>
    </div>
    <div class="form-group">
        <label for="price">Price</label>
        <InputNumber @bind-Value="Model.Price" class="form-group"  id="price"/>
    </div>
    <div class="from-grop">
        <label for="Authors">Author</label>
        <select @bind="Model.AuthorId" class="form-control" id="author">
            <option value=""> --Select author--</option>
            @if(Authors != null)
            {
                foreach (var author in Authors)
                {
                    <option value="@author.Id">@author.FirstName @author.LastName</option>
                }

            }
        </select>
    </div>

    <div class="form-btn-group-sm border-left">
        @if (!string.IsNullOrWhiteSpace(imageDataURL))
        {
            <img src="@imageDataURL" style="height:100px;width:100px" />
        }

        <label for="bookcover">Book Cover Photo</label>
        <InputFile OnChange="HandleFileSelection" oncancel=""/>
        @if (isInvalidFileType)
        {
            <LoadingPrompt Message="Please remove the invalid file type and select as new image, or leave this field blank" />
        }
        
    </div>

    <div class="form-group">
        <InputFile @key="uploadedCount" OnChange="@HandleFileSelection" @onclick="@FileClick" />
        <br />
        <button disabled="@(file == null)">Upload</button>
    </div>
    
    <button class="btn alert-danger" @onclick="GoBackToList">Go back</button>
    <button type="submit" class="btn alert-primary">Create book</button>
</EditForm>



@code {
    private int uploadedCount = 0;
    private int zmienna = 0;
    private Book Model = new Book();
    private IList<Author> Authors;
    private IBrowserFile file;
    private bool isSuccess = true;
    private bool isInvalidFileType = false;
    private string imageDataURL;
    private Stream msFile;

    private void FileClick(){

    }

    protected override async Task OnInitializedAsync()
    {
        Authors = await _authorRepo.Get(Endpoints.AuthorsEndpoint);

    }

    private async Task HandlerCreate()
    {
        if (!isInvalidFileType)
        {
            var ext = Path.GetExtension(file.Name);
            var picId = Guid.NewGuid().ToString().Replace("-", "");
            var picName = $"{picId}{ext}";

            Model.Image = picName;

            await _uploadFile.UploadFile(msFile, picName);

            var isSuccesed = await _bookRepo.Create(Endpoints.BooksEndpoint, Model);
            if (isSuccesed)
            {
                GoBackToList();

            }
        }
    }

    private void GoBackToList()
    {
        _navMan.NavigateTo("/books/");
    }

    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        file = e.File;
        if (file != null)
        {
            var ext = Path.GetExtension(file.Name); 
            if (ext.Contains("jpg") || ext.Contains("png") || ext.Contains("jpeg"))
            {
                msFile = file.OpenReadStream();

                var resizedImageFile = await file.RequestImageFileAsync("image/png",100, 100);

                var buffer = new byte[resizedImageFile.Size];
                await resizedImageFile.OpenReadStream().ReadAsync(buffer);

                var imageBase64Data = Convert.ToBase64String(buffer);
                imageDataURL = string.Format("data:image/png;base64,{0}", imageBase64Data);
                isInvalidFileType = false;
            }
            else
            {
                isInvalidFileType = true;
                imageDataURL = string.Empty;
            }
        }
        else
        {
            isInvalidFileType = false;
        }
    }
}
