@page "/Register"
@using BookStore_UI_ServerSide.Models
@using BookStore_UI_ServerSide.Contracts

@inject IAuthenticationRepository _authenticationRepo
@inject NavigationManager _navMan

<div class="card" style="width: 24rem;">
	<h5 class="card-title text-capitalize text-sm-center">Register now</h5>
	@if (isFaild)
	{
		<div class="aletr alert-danger">
			<p>Someting wnet wrong</p>
		</div>
	}
	<div class="card-body">
		<EditForm Model="ModelReg" OnValidSubmit="HandleRegistation">
		<DataAnnotationsValidator/>
		<ValidationSummary/>

		<div class="form-group">
			<label for="username">User name</label>
			<InputText id="username" class="form-control" @bind-Value="@ModelReg.UserName" />
			<ValidationMessage For="@(()=> ModelReg.UserName)" />
		</div>
		<div class="form-group">
			<label for="password">Password</label>
			<InputText id="password" class="form-control" @bind-Value="@ModelReg.Password" />
			<ValidationMessage For="@(()=> ModelReg.Password )" />
		</div>
		<div class="form-group">
			<label for="confirmpassword">Confim Password</label>
			<InputText id="confirmpassword" class="form-control" @bind-Value="@ModelReg.ConfirmPassword" />
			<ValidationMessage For="@(()=> ModelReg.ConfirmPassword)" />
		</div>
		<button type="submit" class="btn btn-primary btn-block">Submit</button>
			
		</EditForm>
	</div>
</div>

@code {
	private RegistrationModel ModelReg = new RegistrationModel();
	private bool isFaild = false;

	private async Task HandleRegistation()
	{
		
		var response = await _authenticationRepo.Register(ModelReg);
		if (response)
		{
			_navMan.NavigateTo("/");
		}
		else
		{
			isFaild = true;
		}
	}
}
